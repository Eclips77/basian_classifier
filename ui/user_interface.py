import streamlit as st
from src.app_controller import AppController
from services.file_loader import FileLoader

# Initialize once
loader = FileLoader()
controller = AppController("path/to/your_file.csv", "label_column_name", loader)

st.set_page_config(page_title="Naive Bayes Classifier", layout="centered")
st.title("üßÆ Naive Bayes Classifier App")

# 1Ô∏è‚É£ Load and Clean Data
if st.button("1Ô∏è‚É£ Load and Clean Data"):
    controller.load_and_prepare()
    st.success("‚úÖ Data loaded and cleaned successfully!")

# 2Ô∏è‚É£ Train Model
if st.button("2Ô∏è‚É£ Train Model"):
    if controller.X_train is None:
        st.error("‚ö†Ô∏è Please load and clean data first.")
    else:
        controller.train_model()
        st.success("‚úÖ Model trained successfully!")

# 3Ô∏è‚É£ Evaluate Model Accuracy
if st.button("3Ô∏è‚É£ Evaluate Model Accuracy"):
    if controller.evaluator is None:
        st.error("‚ö†Ô∏è Please train the model first.")
    else:
        accuracy = controller.evaluate_model()
        st.write(f"üìä **Model Accuracy:** `{accuracy:.2%}`")

# 4Ô∏è‚É£ Predict a Single Record
st.subheader("üîç Predict a Single Record")

if controller.X_test is not None and controller.evaluator is not None:
    record = {}
    for col in controller.X_test.columns:
        record[col] = st.text_input(f"Enter value for `{col}`")

    if st.button("üîÆ Predict"):
        if any(v.strip() == "" for v in record.values()):
            st.warning("‚ö†Ô∏è Please fill in all fields.")
        else:
            result = controller.predict_record(record)
            if result:
                st.success(f"‚úÖ **Prediction:** `{result}`")
else:
    st.info("‚ÑπÔ∏è Load data and train the model to enable prediction.")
